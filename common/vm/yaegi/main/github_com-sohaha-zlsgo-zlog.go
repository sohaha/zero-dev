// Code generated by 'yaegi extract github.com/sohaha/zlsgo/zlog'. DO NOT EDIT.

package main

import (
	"github.com/sohaha/zlsgo/zlog"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	zlog.ResetFlags(zlog.BitLevel)
	Symbols["github.com/sohaha/zlsgo/zlog/zlog"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AddFlag":             reflect.ValueOf(zlog.AddFlag),
		"BitDate":             reflect.ValueOf(zlog.BitDate),
		"BitDefault":          reflect.ValueOf(zlog.BitDefault),
		"BitLevel":            reflect.ValueOf(zlog.BitLevel),
		"BitLongFile":         reflect.ValueOf(zlog.BitLongFile),
		"BitMicroSeconds":     reflect.ValueOf(zlog.BitMicroSeconds),
		"BitShortFile":        reflect.ValueOf(zlog.BitShortFile),
		"BitStdFlag":          reflect.ValueOf(zlog.BitStdFlag),
		"BitTime":             reflect.ValueOf(zlog.BitTime),
		"CleanLog":            reflect.ValueOf(zlog.CleanLog),
		"ColorBackgroundWrap": reflect.ValueOf(zlog.ColorBackgroundWrap),
		"ColorBlack":          reflect.ValueOf(zlog.ColorBlack),
		"ColorBlue":           reflect.ValueOf(zlog.ColorBlue),
		"ColorCyan":           reflect.ValueOf(zlog.ColorCyan),
		"ColorDefault":        reflect.ValueOf(constant.MakeFromLiteral("49", token.INT, 0)),
		"ColorGreen":          reflect.ValueOf(zlog.ColorGreen),
		"ColorLightBlue":      reflect.ValueOf(zlog.ColorLightBlue),
		"ColorLightCyan":      reflect.ValueOf(zlog.ColorLightCyan),
		"ColorLightGreen":     reflect.ValueOf(zlog.ColorLightGreen),
		"ColorLightGrey":      reflect.ValueOf(zlog.ColorLightGrey),
		"ColorLightMagenta":   reflect.ValueOf(zlog.ColorLightMagenta),
		"ColorLightRed":       reflect.ValueOf(zlog.ColorLightRed),
		"ColorLightWhite":     reflect.ValueOf(zlog.ColorLightWhite),
		"ColorLightYellow":    reflect.ValueOf(zlog.ColorLightYellow),
		"ColorMagenta":        reflect.ValueOf(zlog.ColorMagenta),
		"ColorRed":            reflect.ValueOf(zlog.ColorRed),
		"ColorTextWrap":       reflect.ValueOf(zlog.ColorTextWrap),
		"ColorWhite":          reflect.ValueOf(zlog.ColorWhite),
		"ColorYellow":         reflect.ValueOf(zlog.ColorYellow),
		"Debug":               reflect.ValueOf(zlog.Debug),
		"Debugf":              reflect.ValueOf(zlog.Debugf),
		"DisableColor":        reflect.ValueOf(&zlog.DisableColor).Elem(),
		"DisableConsoleColor": reflect.ValueOf(zlog.DisableConsoleColor),
		"Discard":             reflect.ValueOf(zlog.Discard),
		"Dump":                reflect.ValueOf(zlog.Dump),
		"Error":               reflect.ValueOf(zlog.Error),
		"Errorf":              reflect.ValueOf(zlog.Errorf),
		"Fatal":               reflect.ValueOf(zlog.Fatal),
		"Fatalf":              reflect.ValueOf(zlog.Fatalf),
		"ForceConsoleColor":   reflect.ValueOf(zlog.ForceConsoleColor),
		"GetAllColorText":     reflect.ValueOf(zlog.GetAllColorText),
		"GetFlags":            reflect.ValueOf(zlog.GetFlags),
		"GetLogLevel":         reflect.ValueOf(zlog.GetLogLevel),
		"Info":                reflect.ValueOf(zlog.Info),
		"Infof":               reflect.ValueOf(zlog.Infof),
		"IsSupportColor":      reflect.ValueOf(zlog.IsSupportColor),
		"LevelColous":         reflect.ValueOf(&zlog.LevelColous).Elem(),
		"Levels":              reflect.ValueOf(&zlog.Levels).Elem(),
		"Log":                 reflect.ValueOf(&zlog.Log).Elem(),
		"LogDebug":            reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"LogDump":             reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"LogError":            reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"LogFatal":            reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"LogInfo":             reflect.ValueOf(constant.MakeFromLiteral("7", token.INT, 0)),
		"LogMaxBuf":           reflect.ValueOf(constant.MakeFromLiteral("1048576", token.INT, 0)),
		"LogNot":              reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"LogPanic":            reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"LogSuccess":          reflect.ValueOf(constant.MakeFromLiteral("6", token.INT, 0)),
		"LogTips":             reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"LogTrack":            reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"LogWarn":             reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"New":                 reflect.ValueOf(zlog.New),
		"NewIndentWriter":     reflect.ValueOf(zlog.NewIndentWriter),
		"NewZLog":             reflect.ValueOf(zlog.NewZLog),
		"OpBlink":             reflect.ValueOf(zlog.OpBlink),
		"OpBold":              reflect.ValueOf(zlog.OpBold),
		"OpConcealed":         reflect.ValueOf(zlog.OpConcealed),
		"OpFastBlink":         reflect.ValueOf(zlog.OpFastBlink),
		"OpFuzzy":             reflect.ValueOf(zlog.OpFuzzy),
		"OpItalic":            reflect.ValueOf(zlog.OpItalic),
		"OpReset":             reflect.ValueOf(zlog.OpReset),
		"OpReverse":           reflect.ValueOf(zlog.OpReverse),
		"OpStrikethrough":     reflect.ValueOf(zlog.OpStrikethrough),
		"OpTextWrap":          reflect.ValueOf(zlog.OpTextWrap),
		"OpUnderscore":        reflect.ValueOf(zlog.OpUnderscore),
		"OutAllColor":         reflect.ValueOf(zlog.OutAllColor),
		"Panic":               reflect.ValueOf(zlog.Panic),
		"Panicf":              reflect.ValueOf(zlog.Panicf),
		"Printf":              reflect.ValueOf(zlog.Printf),
		"Println":             reflect.ValueOf(zlog.Println),
		"ResetFlags":          reflect.ValueOf(zlog.ResetFlags),
		"SetFile":             reflect.ValueOf(zlog.SetFile),
		"SetLogLevel":         reflect.ValueOf(zlog.SetLogLevel),
		"SetPrefix":           reflect.ValueOf(zlog.SetPrefix),
		"SetSaveFile":         reflect.ValueOf(zlog.SetSaveFile),
		"Stack":               reflect.ValueOf(zlog.Stack),
		"Success":             reflect.ValueOf(zlog.Success),
		"Successf":            reflect.ValueOf(zlog.Successf),
		"Tips":                reflect.ValueOf(zlog.Tips),
		"Tipsf":               reflect.ValueOf(zlog.Tipsf),
		"Track":               reflect.ValueOf(zlog.Track),
		"Warn":                reflect.ValueOf(zlog.Warn),
		"Warnf":               reflect.ValueOf(zlog.Warnf),

		// type definitions
		"Color":  reflect.ValueOf((*zlog.Color)(nil)),
		"Format": reflect.ValueOf((*zlog.Format)(nil)),
		"Logger": reflect.ValueOf((*zlog.Logger)(nil)),
		"Op":     reflect.ValueOf((*zlog.Op)(nil)),
	}
}
